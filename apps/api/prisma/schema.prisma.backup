// apps/api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  image        String?
  createdAt    DateTime       @default(now())
  accounts     Account[]
  categories   Category[]
  rules        Rule[]
  transactions Transaction[]  @relation("UserTransactions")
  importFiles  ImportFile[]
}

model Account {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  name         String
  type         String
  createdAt    DateTime       @default(now())
  balance      Decimal        @default(0) @db.Decimal(14,2)
  transactions Transaction[]
  @@index([userId])
}

model Category {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  name         String
  parentId     String?
  createdAt    DateTime       @default(now())
  transactions Transaction[]
  rules        Rule[]
  @@unique([userId, name])
}

model Transaction {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation("UserTransactions", fields: [userId], references: [id])
  accountId    String
  account      Account       @relation(fields: [accountId], references: [id])
  amount       Decimal       @db.Decimal(14,2)
  date         DateTime
  description  String?
  categoryId   String?
  category     Category?     @relation(fields: [categoryId], references: [id])
  importFileId String?
  importFile   ImportFile?   @relation(fields: [importFileId], references: [id])
  createdAt    DateTime      @default(now())
  @@index([userId, date])
}

model Rule {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  contains   String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  @@index([userId, active])
}

model ImportFile {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  filename     String
  status       ImportStatus   @default(PENDING)
  uploadedAt   DateTime       @default(now())
  transactions Transaction[]
  @@index([userId])
}

enum ImportStatus {
  PENDING
  PROCESSED
  FAILED
}
